
\select@language {english}
\contentsline {section}{\numberline {1}调研报告}{5}
\contentsline {subsection}{\numberline {1.1}项目背景及实践意义}{5}
\contentsline {subsubsection}{\numberline {1.1.1}项目的背景}{5}
\contentsline {subsubsection}{\numberline {1.1.2}分布式操作系统}{6}
\contentsline {subsubsection}{\numberline {1.1.3}分布式计算}{6}
\contentsline {subsubsection}{\numberline {1.1.4}分布式系统实现并行计算的主要问题}{7}
\contentsline {subsubsection}{\numberline {1.1.5}Inferno操作系统}{8}
\contentsline {subsection}{\numberline {1.2}小组成员相关背景}{9}
\contentsline {subsection}{\numberline {1.3}立项依据}{10}
\contentsline {subsubsection}{\numberline {1.3.1}项目意义}{10}
\contentsline {subsubsection}{\numberline {1.3.2}理论依据}{10}
\contentsline {paragraph}{资源即文件}{10}
\contentsline {paragraph}{命名空间}{11}
\contentsline {paragraph}{使用标准通信协议来访问资源}{11}
\contentsline {subsection}{\numberline {1.4}目前所调研到的相关工作}{12}
\contentsline {subsubsection}{\numberline {1.4.1}Inferno相关调研}{12}
\contentsline {subsubsection}{\numberline {1.4.2}常见并行框架概况}{12}
\contentsline {subsection}{\numberline {1.5}OpenCL调研}{14}
\contentsline {subsubsection}{\numberline {1.5.1}简介}{14}
\contentsline {subsubsection}{\numberline {1.5.2}主机设备交互}{15}
\contentsline {subsubsection}{\numberline {1.5.3}OpenCL架构}{15}
\contentsline {paragraph}{平台模型}{15}
\contentsline {paragraph}{执行模型}{16}
\contentsline {paragraph}{内存模型}{19}
\contentsline {paragraph}{编程模型}{19}
\contentsline {paragraph}{OpenCL软件框架}{19}
\contentsline {paragraph}{OpenCL实现原理}{20}
\contentsline {subsection}{\numberline {1.6}MPI调研}{20}
\contentsline {subsubsection}{\numberline {1.6.1}MPI数据类型}{20}
\contentsline {subsubsection}{\numberline {1.6.2}通信域}{21}
\contentsline {subsubsection}{\numberline {1.6.3}MPI调用接口}{21}
\contentsline {subsubsection}{\numberline {1.6.4}MPI并行编程模式}{22}
\contentsline {paragraph}{主从模式}{23}
\contentsline {paragraph}{对等模式}{24}
\contentsline {subsection}{\numberline {1.7}想法来源及可能遇到的挑战}{24}
\contentsline {section}{\numberline {2}可行性研究报告}{25}
\contentsline {subsection}{\numberline {2.1}理论依据与技术依据}{25}
\contentsline {subsubsection}{\numberline {2.1.1}Sytx协议及其具体实现}{25}
\contentsline {subsubsection}{\numberline {2.1.2}ns - 显示当前命名空间}{28}
\contentsline {subsubsection}{\numberline {2.1.3}bind, mount, unmount - 修改命名空间}{29}
\contentsline {subsubsection}{\numberline {2.1.4}os - 寄主操作系统接口（对寄生安装的Inferno有效）}{30}
\contentsline {subsubsection}{\numberline {2.1.5}cpu - 执行一个远程的命令}{31}
\contentsline {subsubsection}{\numberline {2.1.6}file2chan - 节点间通讯}{31}
\contentsline {subsection}{\numberline {2.2}创新点}{32}
\contentsline {subsubsection}{\numberline {2.2.1}良好的异构支持}{32}
\contentsline {subsubsection}{\numberline {2.2.2}实现MapReduce计算模型}{32}
\contentsline {subsubsection}{\numberline {2.2.3}多节点视为整体的一个节点}{32}
\contentsline {subsubsection}{\numberline {2.2.4}Inferno在64位平台上的移植}{33}
\contentsline {subsubsection}{\numberline {2.2.5}以外部解释器的形式实现并行计算}{33}
\contentsline {subsubsection}{\numberline {2.2.6}以C语言而非Limbo语言来编写解释器程序}{34}
\contentsline {subsubsection}{\numberline {2.2.7}对file2chan的读写方法封装,实现一个文件完成各种类型通讯}{34}
\contentsline {section}{\numberline {3}概要设计报告}{34}
\contentsline {subsection}{\numberline {3.1}总体路线}{34}
\contentsline {subsection}{\numberline {3.2}平台模型 - OpenCL的host~\&~device模式}{35}
\contentsline {subsection}{\numberline {3.3}异构性}{35}
\contentsline {subsubsection}{\numberline {3.3.1}抢占式任务分配}{35}
\contentsline {subsubsection}{\numberline {3.3.2}细并行粒度}{36}
\contentsline {paragraph}{细粒度的并行}{36}
\contentsline {paragraph}{粗粒度的并行}{36}
\contentsline {subsection}{\numberline {3.4}Raspberry Pi2}{36}
\contentsline {section}{\numberline {4}理论研究与实践}{37}
\contentsline {subsection}{\numberline {4.1}Inferno在Raspberry Pi移植}{37}
\contentsline {subsection}{\numberline {4.2}初步尝试 --- 一个串行程序}{38}
\contentsline {subsection}{\numberline {4.3}初步尝试 -- 改写的host~\&~device式并行代码}{40}
\contentsline {paragraph}{host部分}{40}
\contentsline {paragraph}{device部分}{42}
\contentsline {subsection}{\numberline {4.4}file2chan - sharedPool的基础}{44}
\contentsline {subsection}{\numberline {4.5}sharedPool - 节点间通讯(任务分配收发池)}{61}
\contentsline {subsection}{\numberline {4.6}device部分代码}{61}
\contentsline {subsection}{\numberline {4.7}host部分代码}{61}
\contentsline {subsection}{\numberline {4.8}并行框架开放的三个函数}{62}
\contentsline {subsubsection}{\numberline {4.8.1}map}{62}
\contentsline {subsubsection}{\numberline {4.8.2}reduce}{63}
\contentsline {subsubsection}{\numberline {4.8.3}merge}{65}
\contentsline {subsection}{\numberline {4.9}函数并行化原理与容错机制}{66}
\contentsline {subsubsection}{\numberline {4.9.1}map}{66}
\contentsline {subsubsection}{\numberline {4.9.2}reduce}{67}
\contentsline {subsubsection}{\numberline {4.9.3}merge}{68}
\contentsline {subsection}{\numberline {4.10}并行化执行流程图}{68}
\contentsline {subsection}{\numberline {4.11}解释器的总体架构}{73}
\contentsline {section}{\numberline {5}并行计算框架的安装与用法}{74}
\contentsline {subsection}{\numberline {5.1}安装方法}{74}
\contentsline {subsection}{\numberline {5.2}配置device\_ip}{74}
\contentsline {subsection}{\numberline {5.3}user.sh的编写}{74}
\contentsline {subsection}{\numberline {5.4}执行一个并行化程序}{77}
\contentsline {section}{\numberline {6}成果与不足}{78}
\contentsline {subsection}{\numberline {6.1}向官方提交了2个bug与1个patch}{78}
\contentsline {subsubsection}{\numberline {6.1.1}arm架构下的编译bug}{78}
\contentsline {subsubsection}{\numberline {6.1.2}arm架构下的网络接口bug}{78}
\contentsline {subsubsection}{\numberline {6.1.3}有关x86编译问题的patch}{78}
\contentsline {subsection}{\numberline {6.2}日志功能方便调试}{80}
\contentsline {subsection}{\numberline {6.3}故障修复}{82}
\contentsline {subsection}{\numberline {6.4}跨平台性}{82}
\contentsline {subsection}{\numberline {6.5}高度可扩展性与可配置性}{83}
\contentsline {subsection}{\numberline {6.6}benchmark}{84}
\contentsline {subsubsection}{\numberline {6.6.1}各个设备的配置}{84}
\contentsline {paragraph}{树莓派}{84}
\contentsline {paragraph}{刘旭彤的设备}{84}
\contentsline {paragraph}{阮震元的设备}{84}
\contentsline {paragraph}{解宇飞的设备}{85}
\contentsline {paragraph}{杨智的设备}{85}
\contentsline {subsubsection}{\numberline {6.6.2}benchmark内容}{85}
\contentsline {paragraph}{串行版本的benchmark}{86}
\contentsline {paragraph}{并行版本的benchmark}{87}
\contentsline {subsubsection}{\numberline {6.6.3}性能基准测试结果}{89}
\contentsline {subsubsection}{\numberline {6.6.4}使用并行计算框架进行并行benchmark测试}{90}
\contentsline {subsection}{\numberline {6.7}与其他并行计算框架的对比}{91}
\contentsline {subsubsection}{\numberline {6.7.1}异构性}{91}
\contentsline {subsubsection}{\numberline {6.7.2}部署简单}{92}
\contentsline {paragraph}{我们的并行计算框架}{92}
\contentsline {paragraph}{CUDA}{93}
\contentsline {paragraph}{MPI}{93}
\contentsline {subsubsection}{\numberline {6.7.3}编程简单}{93}
\contentsline {paragraph}{我们的并行计算框架}{93}
\contentsline {paragraph}{OpenMP}{93}
\contentsline {paragraph}{CUDA}{94}
\contentsline {paragraph}{OpenCL}{95}
\contentsline {paragraph}{MPI}{99}
\contentsline {subsubsection}{\numberline {6.7.4}支持故障恢复}{102}
\contentsline {subsection}{\numberline {6.8}不足点}{103}
\contentsline {subsection}{\numberline {6.9}完成过程中遇到的困难}{104}
\contentsline {section}{\numberline {7}致谢}{104}
